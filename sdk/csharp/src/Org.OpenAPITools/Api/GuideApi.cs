// <auto-generated>
/*
 * Agent App & Guide Public API
 *
 * 基本地址：`/v1/`（已在 servers 配置） - 普通接口 **无鉴权** - 统一错误：`{\"error\":\"reason\"}` - 分页：`page` 默认 1，`limit` 默认 20 - `score` 为相似度（仅 /guide/search/{pkgname} 返回） 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IGuideApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        GuideApiEvents Events { get; }

        /// <summary>
        /// 获取 guide 列表（按关键词）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">搜索关键词</param>
        /// <param name="page">页码（默认 1） (optional, default to 1)</param>
        /// <param name="limit">每页数量（默认 20） (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGuideGetApiResponse"/>&gt;</returns>
        Task<IGuideGetApiResponse> GuideGetAsync(string q, Option<int> page = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取 guide 列表（按关键词）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="q">搜索关键词</param>
        /// <param name="page">页码（默认 1） (optional, default to 1)</param>
        /// <param name="limit">每页数量（默认 20） (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGuideGetApiResponse"/>?&gt;</returns>
        Task<IGuideGetApiResponse?> GuideGetOrDefaultAsync(string q, Option<int> page = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定 guide（按 id）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGuideIdIdGetApiResponse"/>&gt;</returns>
        Task<IGuideIdIdGetApiResponse> GuideIdIdGetAsync(long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定 guide（按 id）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGuideIdIdGetApiResponse"/>?&gt;</returns>
        Task<IGuideIdIdGetApiResponse?> GuideIdIdGetOrDefaultAsync(long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取某包名下的 guide 列表
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkgname"></param>
        /// <param name="page">页码（默认 1） (optional, default to 1)</param>
        /// <param name="limit">每页数量（默认 20） (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGuidePkgPkgnameGetApiResponse"/>&gt;</returns>
        Task<IGuidePkgPkgnameGetApiResponse> GuidePkgPkgnameGetAsync(string pkgname, Option<int> page = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取某包名下的 guide 列表
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pkgname"></param>
        /// <param name="page">页码（默认 1） (optional, default to 1)</param>
        /// <param name="limit">每页数量（默认 20） (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGuidePkgPkgnameGetApiResponse"/>?&gt;</returns>
        Task<IGuidePkgPkgnameGetApiResponse?> GuidePkgPkgnameGetOrDefaultAsync(string pkgname, Option<int> page = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 在指定包下根据关键词搜索 guide（词向量相似度）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkgname"></param>
        /// <param name="q">搜索关键词</param>
        /// <param name="page">页码（默认 1） (optional, default to 1)</param>
        /// <param name="limit">每页数量（默认 20） (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGuideSearchPkgnameGetApiResponse"/>&gt;</returns>
        Task<IGuideSearchPkgnameGetApiResponse> GuideSearchPkgnameGetAsync(string pkgname, string q, Option<int> page = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 在指定包下根据关键词搜索 guide（词向量相似度）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pkgname"></param>
        /// <param name="q">搜索关键词</param>
        /// <param name="page">页码（默认 1） (optional, default to 1)</param>
        /// <param name="limit">每页数量（默认 20） (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGuideSearchPkgnameGetApiResponse"/>?&gt;</returns>
        Task<IGuideSearchPkgnameGetApiResponse?> GuideSearchPkgnameGetOrDefaultAsync(string pkgname, string q, Option<int> page = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGuideGetApiResponse"/>
    /// </summary>
    public interface IGuideGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.GuideListResponse?>, IDefault<Org.OpenAPITools.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGuideIdIdGetApiResponse"/>
    /// </summary>
    public interface IGuideIdIdGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.GuideItemResponse?>, IDefault<Org.OpenAPITools.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGuidePkgPkgnameGetApiResponse"/>
    /// </summary>
    public interface IGuidePkgPkgnameGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.GuideListResponse?>, IDefault<Org.OpenAPITools.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGuideSearchPkgnameGetApiResponse"/>
    /// </summary>
    public interface IGuideSearchPkgnameGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.GuideSearchResponse?>, IDefault<Org.OpenAPITools.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class GuideApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGuideGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGuideGet;

        internal void ExecuteOnGuideGet(GuideApi.GuideGetApiResponse apiResponse)
        {
            OnGuideGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGuideGet(Exception exception)
        {
            OnErrorGuideGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGuideIdIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGuideIdIdGet;

        internal void ExecuteOnGuideIdIdGet(GuideApi.GuideIdIdGetApiResponse apiResponse)
        {
            OnGuideIdIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGuideIdIdGet(Exception exception)
        {
            OnErrorGuideIdIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGuidePkgPkgnameGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGuidePkgPkgnameGet;

        internal void ExecuteOnGuidePkgPkgnameGet(GuideApi.GuidePkgPkgnameGetApiResponse apiResponse)
        {
            OnGuidePkgPkgnameGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGuidePkgPkgnameGet(Exception exception)
        {
            OnErrorGuidePkgPkgnameGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGuideSearchPkgnameGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGuideSearchPkgnameGet;

        internal void ExecuteOnGuideSearchPkgnameGet(GuideApi.GuideSearchPkgnameGetApiResponse apiResponse)
        {
            OnGuideSearchPkgnameGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGuideSearchPkgnameGet(Exception exception)
        {
            OnErrorGuideSearchPkgnameGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class GuideApi : IGuideApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<GuideApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public GuideApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="GuideApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GuideApi(ILogger<GuideApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, GuideApiEvents guideApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<GuideApi>();
            HttpClient = httpClient;
            Events = guideApiEvents;
        }

        partial void FormatGuideGet(ref string q, ref Option<int> page, ref Option<int> limit);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="q"></param>
        /// <returns></returns>
        private void ValidateGuideGet(string q)
        {
            if (q == null)
                throw new ArgumentNullException(nameof(q));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="q"></param>
        /// <param name="page"></param>
        /// <param name="limit"></param>
        private void AfterGuideGetDefaultImplementation(IGuideGetApiResponse apiResponseLocalVar, string q, Option<int> page, Option<int> limit)
        {
            bool suppressDefaultLog = false;
            AfterGuideGet(ref suppressDefaultLog, apiResponseLocalVar, q, page, limit);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="q"></param>
        /// <param name="page"></param>
        /// <param name="limit"></param>
        partial void AfterGuideGet(ref bool suppressDefaultLog, IGuideGetApiResponse apiResponseLocalVar, string q, Option<int> page, Option<int> limit);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="q"></param>
        /// <param name="page"></param>
        /// <param name="limit"></param>
        private void OnErrorGuideGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string q, Option<int> page, Option<int> limit)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGuideGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, q, page, limit);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="q"></param>
        /// <param name="page"></param>
        /// <param name="limit"></param>
        partial void OnErrorGuideGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string q, Option<int> page, Option<int> limit);

        /// <summary>
        /// 获取 guide 列表（按关键词） 
        /// </summary>
        /// <param name="q">搜索关键词</param>
        /// <param name="page">页码（默认 1） (optional, default to 1)</param>
        /// <param name="limit">每页数量（默认 20） (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGuideGetApiResponse"/>&gt;</returns>
        public async Task<IGuideGetApiResponse?> GuideGetOrDefaultAsync(string q, Option<int> page = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GuideGetAsync(q, page, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取 guide 列表（按关键词） 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">搜索关键词</param>
        /// <param name="page">页码（默认 1） (optional, default to 1)</param>
        /// <param name="limit">每页数量（默认 20） (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGuideGetApiResponse"/>&gt;</returns>
        public async Task<IGuideGetApiResponse> GuideGetAsync(string q, Option<int> page = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGuideGet(q);

                FormatGuideGet(ref q, ref page, ref limit);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/guide"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/guide");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["q"] = ClientUtils.ParameterToString(q);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GuideGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GuideGetApiResponse>();

                        GuideGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/guide", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGuideGetDefaultImplementation(apiResponseLocalVar, q, page, limit);

                        Events.ExecuteOnGuideGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGuideGetDefaultImplementation(e, "/guide", uriBuilderLocalVar.Path, q, page, limit);
                Events.ExecuteOnErrorGuideGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GuideGetApiResponse"/>
        /// </summary>
        public partial class GuideGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGuideGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GuideGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GuideGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GuideGetApiResponse(ILogger<GuideGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.GuideListResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.GuideListResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.GuideListResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ErrorResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGuideIdIdGet(ref long id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGuideIdIdGetDefaultImplementation(IGuideIdIdGetApiResponse apiResponseLocalVar, long id)
        {
            bool suppressDefaultLog = false;
            AfterGuideIdIdGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGuideIdIdGet(ref bool suppressDefaultLog, IGuideIdIdGetApiResponse apiResponseLocalVar, long id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGuideIdIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGuideIdIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGuideIdIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id);

        /// <summary>
        /// 获取指定 guide（按 id） 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGuideIdIdGetApiResponse"/>&gt;</returns>
        public async Task<IGuideIdIdGetApiResponse?> GuideIdIdGetOrDefaultAsync(long id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GuideIdIdGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取指定 guide（按 id） 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGuideIdIdGetApiResponse"/>&gt;</returns>
        public async Task<IGuideIdIdGetApiResponse> GuideIdIdGetAsync(long id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGuideIdIdGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/guide/id/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/guide/id/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GuideIdIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GuideIdIdGetApiResponse>();

                        GuideIdIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/guide/id/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGuideIdIdGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGuideIdIdGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGuideIdIdGetDefaultImplementation(e, "/guide/id/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGuideIdIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GuideIdIdGetApiResponse"/>
        /// </summary>
        public partial class GuideIdIdGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGuideIdIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GuideIdIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GuideIdIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GuideIdIdGetApiResponse(ILogger<GuideIdIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.GuideItemResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.GuideItemResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.GuideItemResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ErrorResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGuidePkgPkgnameGet(ref string pkgname, ref Option<int> page, ref Option<int> limit);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pkgname"></param>
        /// <returns></returns>
        private void ValidateGuidePkgPkgnameGet(string pkgname)
        {
            if (pkgname == null)
                throw new ArgumentNullException(nameof(pkgname));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="pkgname"></param>
        /// <param name="page"></param>
        /// <param name="limit"></param>
        private void AfterGuidePkgPkgnameGetDefaultImplementation(IGuidePkgPkgnameGetApiResponse apiResponseLocalVar, string pkgname, Option<int> page, Option<int> limit)
        {
            bool suppressDefaultLog = false;
            AfterGuidePkgPkgnameGet(ref suppressDefaultLog, apiResponseLocalVar, pkgname, page, limit);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="pkgname"></param>
        /// <param name="page"></param>
        /// <param name="limit"></param>
        partial void AfterGuidePkgPkgnameGet(ref bool suppressDefaultLog, IGuidePkgPkgnameGetApiResponse apiResponseLocalVar, string pkgname, Option<int> page, Option<int> limit);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="pkgname"></param>
        /// <param name="page"></param>
        /// <param name="limit"></param>
        private void OnErrorGuidePkgPkgnameGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string pkgname, Option<int> page, Option<int> limit)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGuidePkgPkgnameGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, pkgname, page, limit);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="pkgname"></param>
        /// <param name="page"></param>
        /// <param name="limit"></param>
        partial void OnErrorGuidePkgPkgnameGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string pkgname, Option<int> page, Option<int> limit);

        /// <summary>
        /// 获取某包名下的 guide 列表 
        /// </summary>
        /// <param name="pkgname"></param>
        /// <param name="page">页码（默认 1） (optional, default to 1)</param>
        /// <param name="limit">每页数量（默认 20） (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGuidePkgPkgnameGetApiResponse"/>&gt;</returns>
        public async Task<IGuidePkgPkgnameGetApiResponse?> GuidePkgPkgnameGetOrDefaultAsync(string pkgname, Option<int> page = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GuidePkgPkgnameGetAsync(pkgname, page, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取某包名下的 guide 列表 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkgname"></param>
        /// <param name="page">页码（默认 1） (optional, default to 1)</param>
        /// <param name="limit">每页数量（默认 20） (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGuidePkgPkgnameGetApiResponse"/>&gt;</returns>
        public async Task<IGuidePkgPkgnameGetApiResponse> GuidePkgPkgnameGetAsync(string pkgname, Option<int> page = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGuidePkgPkgnameGet(pkgname);

                FormatGuidePkgPkgnameGet(ref pkgname, ref page, ref limit);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/guide/pkg/{pkgname}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/guide/pkg/{pkgname}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpkgname%7D", Uri.EscapeDataString(pkgname.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GuidePkgPkgnameGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GuidePkgPkgnameGetApiResponse>();

                        GuidePkgPkgnameGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/guide/pkg/{pkgname}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGuidePkgPkgnameGetDefaultImplementation(apiResponseLocalVar, pkgname, page, limit);

                        Events.ExecuteOnGuidePkgPkgnameGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGuidePkgPkgnameGetDefaultImplementation(e, "/guide/pkg/{pkgname}", uriBuilderLocalVar.Path, pkgname, page, limit);
                Events.ExecuteOnErrorGuidePkgPkgnameGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GuidePkgPkgnameGetApiResponse"/>
        /// </summary>
        public partial class GuidePkgPkgnameGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGuidePkgPkgnameGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GuidePkgPkgnameGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GuidePkgPkgnameGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GuidePkgPkgnameGetApiResponse(ILogger<GuidePkgPkgnameGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.GuideListResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.GuideListResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.GuideListResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ErrorResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGuideSearchPkgnameGet(ref string pkgname, ref string q, ref Option<int> page, ref Option<int> limit);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pkgname"></param>
        /// <param name="q"></param>
        /// <returns></returns>
        private void ValidateGuideSearchPkgnameGet(string pkgname, string q)
        {
            if (pkgname == null)
                throw new ArgumentNullException(nameof(pkgname));

            if (q == null)
                throw new ArgumentNullException(nameof(q));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="pkgname"></param>
        /// <param name="q"></param>
        /// <param name="page"></param>
        /// <param name="limit"></param>
        private void AfterGuideSearchPkgnameGetDefaultImplementation(IGuideSearchPkgnameGetApiResponse apiResponseLocalVar, string pkgname, string q, Option<int> page, Option<int> limit)
        {
            bool suppressDefaultLog = false;
            AfterGuideSearchPkgnameGet(ref suppressDefaultLog, apiResponseLocalVar, pkgname, q, page, limit);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="pkgname"></param>
        /// <param name="q"></param>
        /// <param name="page"></param>
        /// <param name="limit"></param>
        partial void AfterGuideSearchPkgnameGet(ref bool suppressDefaultLog, IGuideSearchPkgnameGetApiResponse apiResponseLocalVar, string pkgname, string q, Option<int> page, Option<int> limit);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="pkgname"></param>
        /// <param name="q"></param>
        /// <param name="page"></param>
        /// <param name="limit"></param>
        private void OnErrorGuideSearchPkgnameGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string pkgname, string q, Option<int> page, Option<int> limit)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGuideSearchPkgnameGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, pkgname, q, page, limit);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="pkgname"></param>
        /// <param name="q"></param>
        /// <param name="page"></param>
        /// <param name="limit"></param>
        partial void OnErrorGuideSearchPkgnameGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string pkgname, string q, Option<int> page, Option<int> limit);

        /// <summary>
        /// 在指定包下根据关键词搜索 guide（词向量相似度） 
        /// </summary>
        /// <param name="pkgname"></param>
        /// <param name="q">搜索关键词</param>
        /// <param name="page">页码（默认 1） (optional, default to 1)</param>
        /// <param name="limit">每页数量（默认 20） (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGuideSearchPkgnameGetApiResponse"/>&gt;</returns>
        public async Task<IGuideSearchPkgnameGetApiResponse?> GuideSearchPkgnameGetOrDefaultAsync(string pkgname, string q, Option<int> page = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GuideSearchPkgnameGetAsync(pkgname, q, page, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 在指定包下根据关键词搜索 guide（词向量相似度） 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkgname"></param>
        /// <param name="q">搜索关键词</param>
        /// <param name="page">页码（默认 1） (optional, default to 1)</param>
        /// <param name="limit">每页数量（默认 20） (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGuideSearchPkgnameGetApiResponse"/>&gt;</returns>
        public async Task<IGuideSearchPkgnameGetApiResponse> GuideSearchPkgnameGetAsync(string pkgname, string q, Option<int> page = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGuideSearchPkgnameGet(pkgname, q);

                FormatGuideSearchPkgnameGet(ref pkgname, ref q, ref page, ref limit);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/guide/search/{pkgname}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/guide/search/{pkgname}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpkgname%7D", Uri.EscapeDataString(pkgname.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["q"] = ClientUtils.ParameterToString(q);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GuideSearchPkgnameGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GuideSearchPkgnameGetApiResponse>();

                        GuideSearchPkgnameGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/guide/search/{pkgname}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGuideSearchPkgnameGetDefaultImplementation(apiResponseLocalVar, pkgname, q, page, limit);

                        Events.ExecuteOnGuideSearchPkgnameGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGuideSearchPkgnameGetDefaultImplementation(e, "/guide/search/{pkgname}", uriBuilderLocalVar.Path, pkgname, q, page, limit);
                Events.ExecuteOnErrorGuideSearchPkgnameGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GuideSearchPkgnameGetApiResponse"/>
        /// </summary>
        public partial class GuideSearchPkgnameGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGuideSearchPkgnameGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GuideSearchPkgnameGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GuideSearchPkgnameGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GuideSearchPkgnameGetApiResponse(ILogger<GuideSearchPkgnameGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.GuideSearchResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.GuideSearchResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.GuideSearchResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ErrorResponse? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
