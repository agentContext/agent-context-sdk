// <auto-generated>
/*
 * Agent App & Guide Public API
 *
 * 基本地址：`/v1/`（已在 servers 配置） - 普通接口 **无鉴权** - 统一错误：`{\"error\":\"reason\"}` - 分页：`page` 默认 1，`limit` 默认 20 - `score` 为相似度（仅 /guide/search/{pkgname} 返回） 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Paging
    /// </summary>
    public partial class Paging : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Paging" /> class.
        /// </summary>
        /// <param name="limit">limit</param>
        /// <param name="page">page</param>
        /// <param name="total">total</param>
        /// <param name="kw">可选，搜索关键词回显</param>
        [JsonConstructor]
        public Paging(int limit, int page, int total, Option<string?> kw = default)
        {
            Limit = limit;
            Page = page;
            Total = total;
            KwOption = kw;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [JsonPropertyName("limit")]
        public int Limit { get; set; }

        /// <summary>
        /// Gets or Sets Page
        /// </summary>
        [JsonPropertyName("page")]
        public int Page { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [JsonPropertyName("total")]
        public int Total { get; set; }

        /// <summary>
        /// Used to track the state of Kw
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KwOption { get; private set; }

        /// <summary>
        /// 可选，搜索关键词回显
        /// </summary>
        /// <value>可选，搜索关键词回显</value>
        [JsonPropertyName("kw")]
        public string? Kw { get { return this.KwOption; } set { this.KwOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Paging {\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Kw: ").Append(Kw).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Paging" />
    /// </summary>
    public class PagingJsonConverter : JsonConverter<Paging>
    {
        /// <summary>
        /// Deserializes json to <see cref="Paging" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Paging Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> limit = default;
            Option<int?> page = default;
            Option<int?> total = default;
            Option<string?> kw = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "limit":
                            limit = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "page":
                            page = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "total":
                            total = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "kw":
                            kw = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!limit.IsSet)
                throw new ArgumentException("Property is required for class Paging.", nameof(limit));

            if (!page.IsSet)
                throw new ArgumentException("Property is required for class Paging.", nameof(page));

            if (!total.IsSet)
                throw new ArgumentException("Property is required for class Paging.", nameof(total));

            if (limit.IsSet && limit.Value == null)
                throw new ArgumentNullException(nameof(limit), "Property is not nullable for class Paging.");

            if (page.IsSet && page.Value == null)
                throw new ArgumentNullException(nameof(page), "Property is not nullable for class Paging.");

            if (total.IsSet && total.Value == null)
                throw new ArgumentNullException(nameof(total), "Property is not nullable for class Paging.");

            if (kw.IsSet && kw.Value == null)
                throw new ArgumentNullException(nameof(kw), "Property is not nullable for class Paging.");

            return new Paging(limit.Value!.Value!, page.Value!.Value!, total.Value!.Value!, kw);
        }

        /// <summary>
        /// Serializes a <see cref="Paging" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paging"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Paging paging, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, paging, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Paging" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paging"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Paging paging, JsonSerializerOptions jsonSerializerOptions)
        {
            if (paging.KwOption.IsSet && paging.Kw == null)
                throw new ArgumentNullException(nameof(paging.Kw), "Property is required for class Paging.");

            writer.WriteNumber("limit", paging.Limit);

            writer.WriteNumber("page", paging.Page);

            writer.WriteNumber("total", paging.Total);

            if (paging.KwOption.IsSet)
                writer.WriteString("kw", paging.Kw);
        }
    }
}
