/**
 * Agent App & Guide Public API
 * 基本地址：`/v1/`（已在 servers 配置） - 普通接口 **无鉴权** - 统一错误：`{\"error\":\"reason\"}` - 分页：`page` 默认 1，`limit` 默认 20 - `score` 为相似度（仅 /guide/search/{pkgname} 返回） 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Guide model module.
 * @module model/Guide
 * @version 1.0.0
 */
class Guide {
    /**
     * Constructs a new <code>Guide</code>.
     * @alias module:model/Guide
     * @param id {Number} 
     * @param packageName {String} 
     * @param vector {Object} 
     * @param action {String} 
     * @param description {String} 
     * @param tokens {Number} 
     * @param source {String} 
     * @param solution {String} 
     */
    constructor(id, packageName, vector, action, description, tokens, source, solution) { 
        
        Guide.initialize(this, id, packageName, vector, action, description, tokens, source, solution);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, packageName, vector, action, description, tokens, source, solution) { 
        obj['id'] = id;
        obj['packageName'] = packageName;
        obj['vector'] = vector;
        obj['action'] = action;
        obj['description'] = description;
        obj['tokens'] = tokens;
        obj['source'] = source;
        obj['solution'] = solution;
    }

    /**
     * Constructs a <code>Guide</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Guide} obj Optional instance to populate.
     * @return {module:model/Guide} The populated <code>Guide</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Guide();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('packageName')) {
                obj['packageName'] = ApiClient.convertToType(data['packageName'], 'String');
            }
            if (data.hasOwnProperty('vector')) {
                obj['vector'] = ApiClient.convertToType(data['vector'], Object);
            }
            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('tokens')) {
                obj['tokens'] = ApiClient.convertToType(data['tokens'], 'Number');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('solution')) {
                obj['solution'] = ApiClient.convertToType(data['solution'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Guide</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Guide</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Guide.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['packageName'] && !(typeof data['packageName'] === 'string' || data['packageName'] instanceof String)) {
            throw new Error("Expected the field `packageName` to be a primitive type in the JSON string but got " + data['packageName']);
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['solution'] && !(typeof data['solution'] === 'string' || data['solution'] instanceof String)) {
            throw new Error("Expected the field `solution` to be a primitive type in the JSON string but got " + data['solution']);
        }

        return true;
    }


}

Guide.RequiredProperties = ["id", "packageName", "vector", "action", "description", "tokens", "source", "solution"];

/**
 * @member {Number} id
 */
Guide.prototype['id'] = undefined;

/**
 * @member {String} packageName
 */
Guide.prototype['packageName'] = undefined;

/**
 * @member {Object} vector
 */
Guide.prototype['vector'] = undefined;

/**
 * @member {String} action
 */
Guide.prototype['action'] = undefined;

/**
 * @member {String} description
 */
Guide.prototype['description'] = undefined;

/**
 * @member {Number} tokens
 */
Guide.prototype['tokens'] = undefined;

/**
 * @member {String} source
 */
Guide.prototype['source'] = undefined;

/**
 * @member {String} solution
 */
Guide.prototype['solution'] = undefined;






export default Guide;

