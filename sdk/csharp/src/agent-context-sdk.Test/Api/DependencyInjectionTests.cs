/*
 * Agent App & Guide Public API
 *
 * 基本地址：`/v1/`（已在 servers 配置） - 普通接口 **无鉴权** - 统一错误：`{\"error\":\"reason\"}` - 分页：`page` 默认 1，`limit` 默认 20 - `score` 为相似度（仅 /guide/search/{pkgname} 返回） 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Security.Cryptography;
using agent-context-sdk.Client;
using agent-context-sdk.Api;
using agent-context-sdk.Extensions;
using Xunit;

namespace agent-context-sdk.Test.Api
{
    /// <summary>
    ///  Tests the dependency injection.
    /// </summary>
    public class DependencyInjectionTest
    {
        private readonly IHost _hostUsingConfigureWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {

            })
            .Build();

        private readonly IHost _hostUsingConfigureWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {

                options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
            })
            .Build();

        private readonly IHost _hostUsingAddWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {

                });
            })
            .Build();

        private readonly IHost _hostUsingAddWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {

                    options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
                });
            })
            .Build();

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithAClientTest()
        {
            var appApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAppApi>();
            Assert.True(appApi.HttpClient.BaseAddress != null);

            var guideApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IGuideApi>();
            Assert.True(guideApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithoutAClientTest()
        {
            var appApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAppApi>();
            Assert.True(appApi.HttpClient.BaseAddress != null);

            var guideApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IGuideApi>();
            Assert.True(guideApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithAClientTest()
        {
            var appApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAppApi>();
            Assert.True(appApi.HttpClient.BaseAddress != null);
            
            var guideApi = _hostUsingAddWithAClient.Services.GetRequiredService<IGuideApi>();
            Assert.True(guideApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithoutAClientTest()
        {
            var appApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAppApi>();
            Assert.True(appApi.HttpClient.BaseAddress != null);

            var guideApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IGuideApi>();
            Assert.True(guideApi.HttpClient.BaseAddress != null);
        }
    }
}
