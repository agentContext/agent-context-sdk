/*
Agent App & Guide Public API

基本地址：`/v1/`（已在 servers 配置） - 普通接口 **无鉴权** - 统一错误：`{\"error\":\"reason\"}` - 分页：`page` 默认 1，`limit` 默认 20 - `score` 为相似度（仅 /guide/search/{pkgname} 返回） 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Guide type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Guide{}

// Guide struct for Guide
type Guide struct {
	Id int64 `json:"id"`
	PackageName string `json:"packageName"`
	Vector interface{} `json:"vector"`
	Action string `json:"action"`
	Description string `json:"description"`
	Tokens int32 `json:"tokens"`
	Source string `json:"source"`
	Solution string `json:"solution"`
}

type _Guide Guide

// NewGuide instantiates a new Guide object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGuide(id int64, packageName string, vector interface{}, action string, description string, tokens int32, source string, solution string) *Guide {
	this := Guide{}
	this.Id = id
	this.PackageName = packageName
	this.Vector = vector
	this.Action = action
	this.Description = description
	this.Tokens = tokens
	this.Source = source
	this.Solution = solution
	return &this
}

// NewGuideWithDefaults instantiates a new Guide object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGuideWithDefaults() *Guide {
	this := Guide{}
	return &this
}

// GetId returns the Id field value
func (o *Guide) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Guide) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Guide) SetId(v int64) {
	o.Id = v
}

// GetPackageName returns the PackageName field value
func (o *Guide) GetPackageName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PackageName
}

// GetPackageNameOk returns a tuple with the PackageName field value
// and a boolean to check if the value has been set.
func (o *Guide) GetPackageNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PackageName, true
}

// SetPackageName sets field value
func (o *Guide) SetPackageName(v string) {
	o.PackageName = v
}

// GetVector returns the Vector field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *Guide) GetVector() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Vector
}

// GetVectorOk returns a tuple with the Vector field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Guide) GetVectorOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Vector) {
		return nil, false
	}
	return &o.Vector, true
}

// SetVector sets field value
func (o *Guide) SetVector(v interface{}) {
	o.Vector = v
}

// GetAction returns the Action field value
func (o *Guide) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *Guide) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *Guide) SetAction(v string) {
	o.Action = v
}

// GetDescription returns the Description field value
func (o *Guide) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Guide) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Guide) SetDescription(v string) {
	o.Description = v
}

// GetTokens returns the Tokens field value
func (o *Guide) GetTokens() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Tokens
}

// GetTokensOk returns a tuple with the Tokens field value
// and a boolean to check if the value has been set.
func (o *Guide) GetTokensOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tokens, true
}

// SetTokens sets field value
func (o *Guide) SetTokens(v int32) {
	o.Tokens = v
}

// GetSource returns the Source field value
func (o *Guide) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *Guide) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *Guide) SetSource(v string) {
	o.Source = v
}

// GetSolution returns the Solution field value
func (o *Guide) GetSolution() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Solution
}

// GetSolutionOk returns a tuple with the Solution field value
// and a boolean to check if the value has been set.
func (o *Guide) GetSolutionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Solution, true
}

// SetSolution sets field value
func (o *Guide) SetSolution(v string) {
	o.Solution = v
}

func (o Guide) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Guide) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["packageName"] = o.PackageName
	if o.Vector != nil {
		toSerialize["vector"] = o.Vector
	}
	toSerialize["action"] = o.Action
	toSerialize["description"] = o.Description
	toSerialize["tokens"] = o.Tokens
	toSerialize["source"] = o.Source
	toSerialize["solution"] = o.Solution
	return toSerialize, nil
}

func (o *Guide) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"packageName",
		"vector",
		"action",
		"description",
		"tokens",
		"source",
		"solution",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGuide := _Guide{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGuide)

	if err != nil {
		return err
	}

	*o = Guide(varGuide)

	return err
}

type NullableGuide struct {
	value *Guide
	isSet bool
}

func (v NullableGuide) Get() *Guide {
	return v.value
}

func (v *NullableGuide) Set(val *Guide) {
	v.value = val
	v.isSet = true
}

func (v NullableGuide) IsSet() bool {
	return v.isSet
}

func (v *NullableGuide) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGuide(val *Guide) *NullableGuide {
	return &NullableGuide{value: val, isSet: true}
}

func (v NullableGuide) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGuide) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


