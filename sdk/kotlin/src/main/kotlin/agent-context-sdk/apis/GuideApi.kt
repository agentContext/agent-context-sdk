/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package agent-context-sdk.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import agent-context-sdk.models.ErrorResponse
import agent-context-sdk.models.GuideItemResponse
import agent-context-sdk.models.GuideListResponse
import agent-context-sdk.models.GuideSearchResponse

import com.squareup.moshi.Json

import agent-context-sdk.infrastructure.ApiClient
import agent-context-sdk.infrastructure.ApiResponse
import agent-context-sdk.infrastructure.ClientException
import agent-context-sdk.infrastructure.ClientError
import agent-context-sdk.infrastructure.ServerException
import agent-context-sdk.infrastructure.ServerError
import agent-context-sdk.infrastructure.MultiValueMap
import agent-context-sdk.infrastructure.PartConfig
import agent-context-sdk.infrastructure.RequestConfig
import agent-context-sdk.infrastructure.RequestMethod
import agent-context-sdk.infrastructure.ResponseType
import agent-context-sdk.infrastructure.Success
import agent-context-sdk.infrastructure.toMultiValue

class GuideApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api/v1")
        }
    }

    /**
     * GET /guide
     * 获取 guide 列表（按关键词）
     * 
     * @param q 搜索关键词
     * @param page 页码（默认 1） (optional, default to 1)
     * @param limit 每页数量（默认 20） (optional, default to 20)
     * @return GuideListResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun guideGet(q: kotlin.String, page: kotlin.Int? = 1, limit: kotlin.Int? = 20) : GuideListResponse {
        val localVarResponse = guideGetWithHttpInfo(q = q, page = page, limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GuideListResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /guide
     * 获取 guide 列表（按关键词）
     * 
     * @param q 搜索关键词
     * @param page 页码（默认 1） (optional, default to 1)
     * @param limit 每页数量（默认 20） (optional, default to 20)
     * @return ApiResponse<GuideListResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun guideGetWithHttpInfo(q: kotlin.String, page: kotlin.Int?, limit: kotlin.Int?) : ApiResponse<GuideListResponse?> {
        val localVariableConfig = guideGetRequestConfig(q = q, page = page, limit = limit)

        return request<Unit, GuideListResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation guideGet
     *
     * @param q 搜索关键词
     * @param page 页码（默认 1） (optional, default to 1)
     * @param limit 每页数量（默认 20） (optional, default to 20)
     * @return RequestConfig
     */
    fun guideGetRequestConfig(q: kotlin.String, page: kotlin.Int?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("q", listOf(q.toString()))
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/guide",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /guide/id/{id}
     * 获取指定 guide（按 id）
     * 
     * @param id 
     * @return GuideItemResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun guideIdIdGet(id: kotlin.Long) : GuideItemResponse {
        val localVarResponse = guideIdIdGetWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GuideItemResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /guide/id/{id}
     * 获取指定 guide（按 id）
     * 
     * @param id 
     * @return ApiResponse<GuideItemResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun guideIdIdGetWithHttpInfo(id: kotlin.Long) : ApiResponse<GuideItemResponse?> {
        val localVariableConfig = guideIdIdGetRequestConfig(id = id)

        return request<Unit, GuideItemResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation guideIdIdGet
     *
     * @param id 
     * @return RequestConfig
     */
    fun guideIdIdGetRequestConfig(id: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/guide/id/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /guide/pkg/{pkgname}
     * 获取某包名下的 guide 列表
     * 
     * @param pkgname 
     * @param page 页码（默认 1） (optional, default to 1)
     * @param limit 每页数量（默认 20） (optional, default to 20)
     * @return GuideListResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun guidePkgPkgnameGet(pkgname: kotlin.String, page: kotlin.Int? = 1, limit: kotlin.Int? = 20) : GuideListResponse {
        val localVarResponse = guidePkgPkgnameGetWithHttpInfo(pkgname = pkgname, page = page, limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GuideListResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /guide/pkg/{pkgname}
     * 获取某包名下的 guide 列表
     * 
     * @param pkgname 
     * @param page 页码（默认 1） (optional, default to 1)
     * @param limit 每页数量（默认 20） (optional, default to 20)
     * @return ApiResponse<GuideListResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun guidePkgPkgnameGetWithHttpInfo(pkgname: kotlin.String, page: kotlin.Int?, limit: kotlin.Int?) : ApiResponse<GuideListResponse?> {
        val localVariableConfig = guidePkgPkgnameGetRequestConfig(pkgname = pkgname, page = page, limit = limit)

        return request<Unit, GuideListResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation guidePkgPkgnameGet
     *
     * @param pkgname 
     * @param page 页码（默认 1） (optional, default to 1)
     * @param limit 每页数量（默认 20） (optional, default to 20)
     * @return RequestConfig
     */
    fun guidePkgPkgnameGetRequestConfig(pkgname: kotlin.String, page: kotlin.Int?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/guide/pkg/{pkgname}".replace("{"+"pkgname"+"}", encodeURIComponent(pkgname.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /guide/search/{pkgname}
     * 在指定包下根据关键词搜索 guide（词向量相似度）
     * 
     * @param pkgname 
     * @param q 搜索关键词
     * @param page 页码（默认 1） (optional, default to 1)
     * @param limit 每页数量（默认 20） (optional, default to 20)
     * @return GuideSearchResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun guideSearchPkgnameGet(pkgname: kotlin.String, q: kotlin.String, page: kotlin.Int? = 1, limit: kotlin.Int? = 20) : GuideSearchResponse {
        val localVarResponse = guideSearchPkgnameGetWithHttpInfo(pkgname = pkgname, q = q, page = page, limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GuideSearchResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /guide/search/{pkgname}
     * 在指定包下根据关键词搜索 guide（词向量相似度）
     * 
     * @param pkgname 
     * @param q 搜索关键词
     * @param page 页码（默认 1） (optional, default to 1)
     * @param limit 每页数量（默认 20） (optional, default to 20)
     * @return ApiResponse<GuideSearchResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun guideSearchPkgnameGetWithHttpInfo(pkgname: kotlin.String, q: kotlin.String, page: kotlin.Int?, limit: kotlin.Int?) : ApiResponse<GuideSearchResponse?> {
        val localVariableConfig = guideSearchPkgnameGetRequestConfig(pkgname = pkgname, q = q, page = page, limit = limit)

        return request<Unit, GuideSearchResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation guideSearchPkgnameGet
     *
     * @param pkgname 
     * @param q 搜索关键词
     * @param page 页码（默认 1） (optional, default to 1)
     * @param limit 每页数量（默认 20） (optional, default to 20)
     * @return RequestConfig
     */
    fun guideSearchPkgnameGetRequestConfig(pkgname: kotlin.String, q: kotlin.String, page: kotlin.Int?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("q", listOf(q.toString()))
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/guide/search/{pkgname}".replace("{"+"pkgname"+"}", encodeURIComponent(pkgname.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
