/**
 * Agent App & Guide Public API
 * 基本地址：`/v1/`（已在 servers 配置） - 普通接口 **无鉴权** - 统一错误：`{\"error\":\"reason\"}` - 分页：`page` 默认 1，`limit` 默认 20 - `score` 为相似度（仅 /guide/search/{pkgname} 返回） 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The App model module.
 * @module model/App
 * @version 1.0.0
 */
class App {
    /**
     * Constructs a new <code>App</code>.
     * @alias module:model/App
     * @param id {Number} 
     * @param appName {String} 
     * @param packageName {String} 
     * @param description {String} 
     * @param tokdens {Number} 
     * @param createAt {Date} 
     * @param updateAt {Date} 
     */
    constructor(id, appName, packageName, description, tokdens, createAt, updateAt) { 
        
        App.initialize(this, id, appName, packageName, description, tokdens, createAt, updateAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, appName, packageName, description, tokdens, createAt, updateAt) { 
        obj['Id'] = id;
        obj['AppName'] = appName;
        obj['PackageName'] = packageName;
        obj['Description'] = description;
        obj['Tokdens'] = tokdens;
        obj['CreateAt'] = createAt;
        obj['UpdateAt'] = updateAt;
    }

    /**
     * Constructs a <code>App</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/App} obj Optional instance to populate.
     * @return {module:model/App} The populated <code>App</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new App();

            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'Number');
            }
            if (data.hasOwnProperty('AppName')) {
                obj['AppName'] = ApiClient.convertToType(data['AppName'], 'String');
            }
            if (data.hasOwnProperty('PackageName')) {
                obj['PackageName'] = ApiClient.convertToType(data['PackageName'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Tokdens')) {
                obj['Tokdens'] = ApiClient.convertToType(data['Tokdens'], 'Number');
            }
            if (data.hasOwnProperty('CreateAt')) {
                obj['CreateAt'] = ApiClient.convertToType(data['CreateAt'], 'Date');
            }
            if (data.hasOwnProperty('UpdateAt')) {
                obj['UpdateAt'] = ApiClient.convertToType(data['UpdateAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>App</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>App</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of App.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['AppName'] && !(typeof data['AppName'] === 'string' || data['AppName'] instanceof String)) {
            throw new Error("Expected the field `AppName` to be a primitive type in the JSON string but got " + data['AppName']);
        }
        // ensure the json data is a string
        if (data['PackageName'] && !(typeof data['PackageName'] === 'string' || data['PackageName'] instanceof String)) {
            throw new Error("Expected the field `PackageName` to be a primitive type in the JSON string but got " + data['PackageName']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }

        return true;
    }


}

App.RequiredProperties = ["Id", "AppName", "PackageName", "Description", "Tokdens", "CreateAt", "UpdateAt"];

/**
 * @member {Number} Id
 */
App.prototype['Id'] = undefined;

/**
 * @member {String} AppName
 */
App.prototype['AppName'] = undefined;

/**
 * @member {String} PackageName
 */
App.prototype['PackageName'] = undefined;

/**
 * @member {String} Description
 */
App.prototype['Description'] = undefined;

/**
 * @member {Number} Tokdens
 */
App.prototype['Tokdens'] = undefined;

/**
 * @member {Date} CreateAt
 */
App.prototype['CreateAt'] = undefined;

/**
 * @member {Date} UpdateAt
 */
App.prototype['UpdateAt'] = undefined;






export default App;

