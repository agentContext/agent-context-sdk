/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package agent-context-sdk.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import agent-context-sdk.models.AppItemResponse
import agent-context-sdk.models.AppListResponse
import agent-context-sdk.models.ErrorResponse

import com.squareup.moshi.Json

import agent-context-sdk.infrastructure.ApiClient
import agent-context-sdk.infrastructure.ApiResponse
import agent-context-sdk.infrastructure.ClientException
import agent-context-sdk.infrastructure.ClientError
import agent-context-sdk.infrastructure.ServerException
import agent-context-sdk.infrastructure.ServerError
import agent-context-sdk.infrastructure.MultiValueMap
import agent-context-sdk.infrastructure.PartConfig
import agent-context-sdk.infrastructure.RequestConfig
import agent-context-sdk.infrastructure.RequestMethod
import agent-context-sdk.infrastructure.ResponseType
import agent-context-sdk.infrastructure.Success
import agent-context-sdk.infrastructure.toMultiValue

class AppApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api/v1")
        }
    }

    /**
     * GET /app
     * 获取 app 列表
     * 
     * @param page 页码（默认 1） (optional, default to 1)
     * @param limit 每页数量（默认 20） (optional, default to 20)
     * @return AppListResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun appGet(page: kotlin.Int? = 1, limit: kotlin.Int? = 20) : AppListResponse {
        val localVarResponse = appGetWithHttpInfo(page = page, limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AppListResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /app
     * 获取 app 列表
     * 
     * @param page 页码（默认 1） (optional, default to 1)
     * @param limit 每页数量（默认 20） (optional, default to 20)
     * @return ApiResponse<AppListResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun appGetWithHttpInfo(page: kotlin.Int?, limit: kotlin.Int?) : ApiResponse<AppListResponse?> {
        val localVariableConfig = appGetRequestConfig(page = page, limit = limit)

        return request<Unit, AppListResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation appGet
     *
     * @param page 页码（默认 1） (optional, default to 1)
     * @param limit 每页数量（默认 20） (optional, default to 20)
     * @return RequestConfig
     */
    fun appGetRequestConfig(page: kotlin.Int?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/app",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /app/id/{id}
     * 获取指定 app 信息（按 id）
     * 
     * @param id 
     * @return AppItemResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun appIdIdGet(id: kotlin.Int) : AppItemResponse {
        val localVarResponse = appIdIdGetWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AppItemResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /app/id/{id}
     * 获取指定 app 信息（按 id）
     * 
     * @param id 
     * @return ApiResponse<AppItemResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun appIdIdGetWithHttpInfo(id: kotlin.Int) : ApiResponse<AppItemResponse?> {
        val localVariableConfig = appIdIdGetRequestConfig(id = id)

        return request<Unit, AppItemResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation appIdIdGet
     *
     * @param id 
     * @return RequestConfig
     */
    fun appIdIdGetRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/app/id/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /app/pkg/{pkgname}
     * 获取指定 app 信息（按包名）
     * 
     * @param pkgname 
     * @return AppItemResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun appPkgPkgnameGet(pkgname: kotlin.String) : AppItemResponse {
        val localVarResponse = appPkgPkgnameGetWithHttpInfo(pkgname = pkgname)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AppItemResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /app/pkg/{pkgname}
     * 获取指定 app 信息（按包名）
     * 
     * @param pkgname 
     * @return ApiResponse<AppItemResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun appPkgPkgnameGetWithHttpInfo(pkgname: kotlin.String) : ApiResponse<AppItemResponse?> {
        val localVariableConfig = appPkgPkgnameGetRequestConfig(pkgname = pkgname)

        return request<Unit, AppItemResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation appPkgPkgnameGet
     *
     * @param pkgname 
     * @return RequestConfig
     */
    fun appPkgPkgnameGetRequestConfig(pkgname: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/app/pkg/{pkgname}".replace("{"+"pkgname"+"}", encodeURIComponent(pkgname.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /app/search
     * 搜索 app
     * 
     * @param q 搜索关键词
     * @param page 页码（默认 1） (optional, default to 1)
     * @param limit 每页数量（默认 20） (optional, default to 20)
     * @return AppListResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun appSearchGet(q: kotlin.String, page: kotlin.Int? = 1, limit: kotlin.Int? = 20) : AppListResponse {
        val localVarResponse = appSearchGetWithHttpInfo(q = q, page = page, limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AppListResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /app/search
     * 搜索 app
     * 
     * @param q 搜索关键词
     * @param page 页码（默认 1） (optional, default to 1)
     * @param limit 每页数量（默认 20） (optional, default to 20)
     * @return ApiResponse<AppListResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun appSearchGetWithHttpInfo(q: kotlin.String, page: kotlin.Int?, limit: kotlin.Int?) : ApiResponse<AppListResponse?> {
        val localVariableConfig = appSearchGetRequestConfig(q = q, page = page, limit = limit)

        return request<Unit, AppListResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation appSearchGet
     *
     * @param q 搜索关键词
     * @param page 页码（默认 1） (optional, default to 1)
     * @param limit 每页数量（默认 20） (optional, default to 20)
     * @return RequestConfig
     */
    fun appSearchGetRequestConfig(q: kotlin.String, page: kotlin.Int?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("q", listOf(q.toString()))
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/app/search",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
