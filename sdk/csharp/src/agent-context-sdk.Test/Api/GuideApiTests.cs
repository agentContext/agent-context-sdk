/*
 * Agent App & Guide Public API
 *
 * 基本地址：`/v1/`（已在 servers 配置） - 普通接口 **无鉴权** - 统一错误：`{\"error\":\"reason\"}` - 分页：`page` 默认 1，`limit` 默认 20 - `score` 为相似度（仅 /guide/search/{pkgname} 返回） 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using agent-context-sdk.Api;
using agent-context-sdk.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace agent-context-sdk.Test.Api
{
    /// <summary>
    ///  Class for testing GuideApi
    /// </summary>
    public sealed class GuideApiTests : ApiTestsBase
    {
        private readonly IGuideApi _instance;

        public GuideApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IGuideApi>();
        }

        /// <summary>
        /// Test GuideGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GuideGetAsyncTest()
        {
            string q = default!;
            Client.Option<int> page = default!;
            Client.Option<int> limit = default!;
            var response = await _instance.GuideGetAsync(q, page, limit);
            var model = response.Ok();
            Assert.IsType<GuideListResponse>(model);
        }

        /// <summary>
        /// Test GuideIdIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GuideIdIdGetAsyncTest()
        {
            long id = default!;
            var response = await _instance.GuideIdIdGetAsync(id);
            var model = response.Ok();
            Assert.IsType<GuideItemResponse>(model);
        }

        /// <summary>
        /// Test GuidePkgPkgnameGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GuidePkgPkgnameGetAsyncTest()
        {
            string pkgname = default!;
            Client.Option<int> page = default!;
            Client.Option<int> limit = default!;
            var response = await _instance.GuidePkgPkgnameGetAsync(pkgname, page, limit);
            var model = response.Ok();
            Assert.IsType<GuideListResponse>(model);
        }

        /// <summary>
        /// Test GuideSearchPkgnameGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GuideSearchPkgnameGetAsyncTest()
        {
            string pkgname = default!;
            string q = default!;
            Client.Option<int> page = default!;
            Client.Option<int> limit = default!;
            var response = await _instance.GuideSearchPkgnameGetAsync(pkgname, q, page, limit);
            var model = response.Ok();
            Assert.IsType<GuideSearchResponse>(model);
        }
    }
}
