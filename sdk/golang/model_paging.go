/*
Agent App & Guide Public API

基本地址：`/v1/`（已在 servers 配置） - 普通接口 **无鉴权** - 统一错误：`{\"error\":\"reason\"}` - 分页：`page` 默认 1，`limit` 默认 20 - `score` 为相似度（仅 /guide/search/{pkgname} 返回） 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Paging type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Paging{}

// Paging struct for Paging
type Paging struct {
	Limit int32 `json:"limit"`
	Page int32 `json:"page"`
	Total int32 `json:"total"`
	// 可选，搜索关键词回显
	Kw *string `json:"kw,omitempty"`
}

type _Paging Paging

// NewPaging instantiates a new Paging object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaging(limit int32, page int32, total int32) *Paging {
	this := Paging{}
	this.Limit = limit
	this.Page = page
	this.Total = total
	return &this
}

// NewPagingWithDefaults instantiates a new Paging object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPagingWithDefaults() *Paging {
	this := Paging{}
	return &this
}

// GetLimit returns the Limit field value
func (o *Paging) GetLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *Paging) GetLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *Paging) SetLimit(v int32) {
	o.Limit = v
}

// GetPage returns the Page field value
func (o *Paging) GetPage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Page
}

// GetPageOk returns a tuple with the Page field value
// and a boolean to check if the value has been set.
func (o *Paging) GetPageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Page, true
}

// SetPage sets field value
func (o *Paging) SetPage(v int32) {
	o.Page = v
}

// GetTotal returns the Total field value
func (o *Paging) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *Paging) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *Paging) SetTotal(v int32) {
	o.Total = v
}

// GetKw returns the Kw field value if set, zero value otherwise.
func (o *Paging) GetKw() string {
	if o == nil || IsNil(o.Kw) {
		var ret string
		return ret
	}
	return *o.Kw
}

// GetKwOk returns a tuple with the Kw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Paging) GetKwOk() (*string, bool) {
	if o == nil || IsNil(o.Kw) {
		return nil, false
	}
	return o.Kw, true
}

// HasKw returns a boolean if a field has been set.
func (o *Paging) HasKw() bool {
	if o != nil && !IsNil(o.Kw) {
		return true
	}

	return false
}

// SetKw gets a reference to the given string and assigns it to the Kw field.
func (o *Paging) SetKw(v string) {
	o.Kw = &v
}

func (o Paging) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Paging) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["limit"] = o.Limit
	toSerialize["page"] = o.Page
	toSerialize["total"] = o.Total
	if !IsNil(o.Kw) {
		toSerialize["kw"] = o.Kw
	}
	return toSerialize, nil
}

func (o *Paging) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"limit",
		"page",
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaging := _Paging{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaging)

	if err != nil {
		return err
	}

	*o = Paging(varPaging)

	return err
}

type NullablePaging struct {
	value *Paging
	isSet bool
}

func (v NullablePaging) Get() *Paging {
	return v.value
}

func (v *NullablePaging) Set(val *Paging) {
	v.value = val
	v.isSet = true
}

func (v NullablePaging) IsSet() bool {
	return v.isSet
}

func (v *NullablePaging) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaging(val *Paging) *NullablePaging {
	return &NullablePaging{value: val, isSet: true}
}

func (v NullablePaging) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaging) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


