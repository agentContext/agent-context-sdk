// <auto-generated>
/*
 * Agent App & Guide Public API
 *
 * 基本地址：`/v1/`（已在 servers 配置） - 普通接口 **无鉴权** - 统一错误：`{\"error\":\"reason\"}` - 分页：`page` 默认 1，`limit` 默认 20 - `score` 为相似度（仅 /guide/search/{pkgname} 返回） 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GuideSearchResponse
    /// </summary>
    public partial class GuideSearchResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GuideSearchResponse" /> class.
        /// </summary>
        /// <param name="data">data</param>
        /// <param name="paging">paging</param>
        /// <param name="score">与 data 同顺序的相似度分数</param>
        [JsonConstructor]
        public GuideSearchResponse(List<Guide> data, Paging paging, List<float> score)
        {
            Data = data;
            Paging = paging;
            Score = score;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public List<Guide> Data { get; set; }

        /// <summary>
        /// Gets or Sets Paging
        /// </summary>
        [JsonPropertyName("paging")]
        public Paging Paging { get; set; }

        /// <summary>
        /// 与 data 同顺序的相似度分数
        /// </summary>
        /// <value>与 data 同顺序的相似度分数</value>
        [JsonPropertyName("score")]
        public List<float> Score { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GuideSearchResponse {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Paging: ").Append(Paging).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GuideSearchResponse" />
    /// </summary>
    public class GuideSearchResponseJsonConverter : JsonConverter<GuideSearchResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="GuideSearchResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GuideSearchResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<Guide>?> data = default;
            Option<Paging?> paging = default;
            Option<List<float>?> score = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "data":
                            data = new Option<List<Guide>?>(JsonSerializer.Deserialize<List<Guide>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "paging":
                            paging = new Option<Paging?>(JsonSerializer.Deserialize<Paging>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "score":
                            score = new Option<List<float>?>(JsonSerializer.Deserialize<List<float>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!data.IsSet)
                throw new ArgumentException("Property is required for class GuideSearchResponse.", nameof(data));

            if (!paging.IsSet)
                throw new ArgumentException("Property is required for class GuideSearchResponse.", nameof(paging));

            if (!score.IsSet)
                throw new ArgumentException("Property is required for class GuideSearchResponse.", nameof(score));

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class GuideSearchResponse.");

            if (paging.IsSet && paging.Value == null)
                throw new ArgumentNullException(nameof(paging), "Property is not nullable for class GuideSearchResponse.");

            if (score.IsSet && score.Value == null)
                throw new ArgumentNullException(nameof(score), "Property is not nullable for class GuideSearchResponse.");

            return new GuideSearchResponse(data.Value!, paging.Value!, score.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="GuideSearchResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="guideSearchResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GuideSearchResponse guideSearchResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, guideSearchResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GuideSearchResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="guideSearchResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GuideSearchResponse guideSearchResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (guideSearchResponse.Data == null)
                throw new ArgumentNullException(nameof(guideSearchResponse.Data), "Property is required for class GuideSearchResponse.");

            if (guideSearchResponse.Paging == null)
                throw new ArgumentNullException(nameof(guideSearchResponse.Paging), "Property is required for class GuideSearchResponse.");

            if (guideSearchResponse.Score == null)
                throw new ArgumentNullException(nameof(guideSearchResponse.Score), "Property is required for class GuideSearchResponse.");

            writer.WritePropertyName("data");
            JsonSerializer.Serialize(writer, guideSearchResponse.Data, jsonSerializerOptions);
            writer.WritePropertyName("paging");
            JsonSerializer.Serialize(writer, guideSearchResponse.Paging, jsonSerializerOptions);
            writer.WritePropertyName("score");
            JsonSerializer.Serialize(writer, guideSearchResponse.Score, jsonSerializerOptions);
        }
    }
}
