// <auto-generated>
/*
 * Agent App & Guide Public API
 *
 * 基本地址：`/v1/`（已在 servers 配置） - 普通接口 **无鉴权** - 统一错误：`{\"error\":\"reason\"}` - 分页：`page` 默认 1，`limit` 默认 20 - `score` 为相似度（仅 /guide/search/{pkgname} 返回） 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using agent-context-sdk.Client;

namespace agent-context-sdk.Model
{
    /// <summary>
    /// App
    /// </summary>
    public partial class App : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="App" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="appName">appName</param>
        /// <param name="packageName">packageName</param>
        /// <param name="description">description</param>
        /// <param name="tokdens">tokdens</param>
        /// <param name="createAt">createAt</param>
        /// <param name="updateAt">updateAt</param>
        [JsonConstructor]
        public App(int id, string appName, string packageName, string description, int tokdens, DateTime createAt, DateTime updateAt)
        {
            Id = id;
            AppName = appName;
            PackageName = packageName;
            Description = description;
            Tokdens = tokdens;
            CreateAt = createAt;
            UpdateAt = updateAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("Id")]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets AppName
        /// </summary>
        [JsonPropertyName("AppName")]
        public string AppName { get; set; }

        /// <summary>
        /// Gets or Sets PackageName
        /// </summary>
        [JsonPropertyName("PackageName")]
        public string PackageName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("Description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Tokdens
        /// </summary>
        [JsonPropertyName("Tokdens")]
        public int Tokdens { get; set; }

        /// <summary>
        /// Gets or Sets CreateAt
        /// </summary>
        [JsonPropertyName("CreateAt")]
        public DateTime CreateAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdateAt
        /// </summary>
        [JsonPropertyName("UpdateAt")]
        public DateTime UpdateAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class App {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AppName: ").Append(AppName).Append("\n");
            sb.Append("  PackageName: ").Append(PackageName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Tokdens: ").Append(Tokdens).Append("\n");
            sb.Append("  CreateAt: ").Append(CreateAt).Append("\n");
            sb.Append("  UpdateAt: ").Append(UpdateAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="App" />
    /// </summary>
    public class AppJsonConverter : JsonConverter<App>
    {
        /// <summary>
        /// The format to use to serialize CreateAt
        /// </summary>
        public static string CreateAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdateAt
        /// </summary>
        public static string UpdateAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="App" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override App Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<string?> appName = default;
            Option<string?> packageName = default;
            Option<string?> description = default;
            Option<int?> tokdens = default;
            Option<DateTime?> createAt = default;
            Option<DateTime?> updateAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "AppName":
                            appName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "PackageName":
                            packageName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "Description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "Tokdens":
                            tokdens = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "CreateAt":
                            createAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "UpdateAt":
                            updateAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class App.", nameof(id));

            if (!appName.IsSet)
                throw new ArgumentException("Property is required for class App.", nameof(appName));

            if (!packageName.IsSet)
                throw new ArgumentException("Property is required for class App.", nameof(packageName));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class App.", nameof(description));

            if (!tokdens.IsSet)
                throw new ArgumentException("Property is required for class App.", nameof(tokdens));

            if (!createAt.IsSet)
                throw new ArgumentException("Property is required for class App.", nameof(createAt));

            if (!updateAt.IsSet)
                throw new ArgumentException("Property is required for class App.", nameof(updateAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class App.");

            if (appName.IsSet && appName.Value == null)
                throw new ArgumentNullException(nameof(appName), "Property is not nullable for class App.");

            if (packageName.IsSet && packageName.Value == null)
                throw new ArgumentNullException(nameof(packageName), "Property is not nullable for class App.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class App.");

            if (tokdens.IsSet && tokdens.Value == null)
                throw new ArgumentNullException(nameof(tokdens), "Property is not nullable for class App.");

            if (createAt.IsSet && createAt.Value == null)
                throw new ArgumentNullException(nameof(createAt), "Property is not nullable for class App.");

            if (updateAt.IsSet && updateAt.Value == null)
                throw new ArgumentNullException(nameof(updateAt), "Property is not nullable for class App.");

            return new App(id.Value!.Value!, appName.Value!, packageName.Value!, description.Value!, tokdens.Value!.Value!, createAt.Value!.Value!, updateAt.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="App" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="app"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, App app, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, app, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="App" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="app"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, App app, JsonSerializerOptions jsonSerializerOptions)
        {
            if (app.AppName == null)
                throw new ArgumentNullException(nameof(app.AppName), "Property is required for class App.");

            if (app.PackageName == null)
                throw new ArgumentNullException(nameof(app.PackageName), "Property is required for class App.");

            if (app.Description == null)
                throw new ArgumentNullException(nameof(app.Description), "Property is required for class App.");

            writer.WriteNumber("Id", app.Id);

            writer.WriteString("AppName", app.AppName);

            writer.WriteString("PackageName", app.PackageName);

            writer.WriteString("Description", app.Description);

            writer.WriteNumber("Tokdens", app.Tokdens);

            writer.WriteString("CreateAt", app.CreateAt.ToString(CreateAtFormat));

            writer.WriteString("UpdateAt", app.UpdateAt.ToString(UpdateAtFormat));
        }
    }
}
