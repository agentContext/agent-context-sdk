=begin
#Agent App & Guide Public API

#基本地址：`/v1/`（已在 servers 配置） - 普通接口 **无鉴权** - 统一错误：`{\"error\":\"reason\"}` - 分页：`page` 默认 1，`limit` 默认 20 - `score` 为相似度（仅 /guide/search/{pkgname} 返回） 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module OpenapiClient
  class GuideApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # 获取 guide 列表（按关键词）
    # @param q [String] 搜索关键词
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 页码（默认 1） (default to 1)
    # @option opts [Integer] :limit 每页数量（默认 20） (default to 20)
    # @return [GuideListResponse]
    def guide_get(q, opts = {})
      data, _status_code, _headers = guide_get_with_http_info(q, opts)
      data
    end

    # 获取 guide 列表（按关键词）
    # @param q [String] 搜索关键词
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 页码（默认 1） (default to 1)
    # @option opts [Integer] :limit 每页数量（默认 20） (default to 20)
    # @return [Array<(GuideListResponse, Integer, Hash)>] GuideListResponse data, response status code and response headers
    def guide_get_with_http_info(q, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GuideApi.guide_get ...'
      end
      # verify the required parameter 'q' is set
      if @api_client.config.client_side_validation && q.nil?
        fail ArgumentError, "Missing the required parameter 'q' when calling GuideApi.guide_get"
      end
      if @api_client.config.client_side_validation && q.to_s.length < 1
        fail ArgumentError, 'invalid value for "q" when calling GuideApi.guide_get, the character length must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling GuideApi.guide_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling GuideApi.guide_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/guide'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = q
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GuideListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GuideApi.guide_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GuideApi#guide_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 获取指定 guide（按 id）
    # @param id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [GuideItemResponse]
    def guide_id_id_get(id, opts = {})
      data, _status_code, _headers = guide_id_id_get_with_http_info(id, opts)
      data
    end

    # 获取指定 guide（按 id）
    # @param id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GuideItemResponse, Integer, Hash)>] GuideItemResponse data, response status code and response headers
    def guide_id_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GuideApi.guide_id_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling GuideApi.guide_id_id_get"
      end
      # resource path
      local_var_path = '/guide/id/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GuideItemResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GuideApi.guide_id_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GuideApi#guide_id_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 获取某包名下的 guide 列表
    # @param pkgname [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 页码（默认 1） (default to 1)
    # @option opts [Integer] :limit 每页数量（默认 20） (default to 20)
    # @return [GuideListResponse]
    def guide_pkg_pkgname_get(pkgname, opts = {})
      data, _status_code, _headers = guide_pkg_pkgname_get_with_http_info(pkgname, opts)
      data
    end

    # 获取某包名下的 guide 列表
    # @param pkgname [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 页码（默认 1） (default to 1)
    # @option opts [Integer] :limit 每页数量（默认 20） (default to 20)
    # @return [Array<(GuideListResponse, Integer, Hash)>] GuideListResponse data, response status code and response headers
    def guide_pkg_pkgname_get_with_http_info(pkgname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GuideApi.guide_pkg_pkgname_get ...'
      end
      # verify the required parameter 'pkgname' is set
      if @api_client.config.client_side_validation && pkgname.nil?
        fail ArgumentError, "Missing the required parameter 'pkgname' when calling GuideApi.guide_pkg_pkgname_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling GuideApi.guide_pkg_pkgname_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling GuideApi.guide_pkg_pkgname_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/guide/pkg/{pkgname}'.sub('{' + 'pkgname' + '}', CGI.escape(pkgname.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GuideListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GuideApi.guide_pkg_pkgname_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GuideApi#guide_pkg_pkgname_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 在指定包下根据关键词搜索 guide（词向量相似度）
    # @param pkgname [String] 
    # @param q [String] 搜索关键词
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 页码（默认 1） (default to 1)
    # @option opts [Integer] :limit 每页数量（默认 20） (default to 20)
    # @return [GuideSearchResponse]
    def guide_search_pkgname_get(pkgname, q, opts = {})
      data, _status_code, _headers = guide_search_pkgname_get_with_http_info(pkgname, q, opts)
      data
    end

    # 在指定包下根据关键词搜索 guide（词向量相似度）
    # @param pkgname [String] 
    # @param q [String] 搜索关键词
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 页码（默认 1） (default to 1)
    # @option opts [Integer] :limit 每页数量（默认 20） (default to 20)
    # @return [Array<(GuideSearchResponse, Integer, Hash)>] GuideSearchResponse data, response status code and response headers
    def guide_search_pkgname_get_with_http_info(pkgname, q, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GuideApi.guide_search_pkgname_get ...'
      end
      # verify the required parameter 'pkgname' is set
      if @api_client.config.client_side_validation && pkgname.nil?
        fail ArgumentError, "Missing the required parameter 'pkgname' when calling GuideApi.guide_search_pkgname_get"
      end
      # verify the required parameter 'q' is set
      if @api_client.config.client_side_validation && q.nil?
        fail ArgumentError, "Missing the required parameter 'q' when calling GuideApi.guide_search_pkgname_get"
      end
      if @api_client.config.client_side_validation && q.to_s.length < 1
        fail ArgumentError, 'invalid value for "q" when calling GuideApi.guide_search_pkgname_get, the character length must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling GuideApi.guide_search_pkgname_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling GuideApi.guide_search_pkgname_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/guide/search/{pkgname}'.sub('{' + 'pkgname' + '}', CGI.escape(pkgname.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = q
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GuideSearchResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GuideApi.guide_search_pkgname_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GuideApi#guide_search_pkgname_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
