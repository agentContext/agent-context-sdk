// <auto-generated>
/*
 * Agent App & Guide Public API
 *
 * 基本地址：`/v1/`（已在 servers 配置） - 普通接口 **无鉴权** - 统一错误：`{\"error\":\"reason\"}` - 分页：`page` 默认 1，`limit` 默认 20 - `score` 为相似度（仅 /guide/search/{pkgname} 返回） 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Guide
    /// </summary>
    public partial class Guide : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Guide" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="packageName">packageName</param>
        /// <param name="action">action</param>
        /// <param name="description">description</param>
        /// <param name="tokens">tokens</param>
        /// <param name="source">source</param>
        /// <param name="solution">solution</param>
        /// <param name="vector">vector</param>
        [JsonConstructor]
        public Guide(long id, string packageName, string action, string description, int tokens, string source, string solution, Object? vector = default)
        {
            Id = id;
            PackageName = packageName;
            Action = action;
            Description = description;
            Tokens = tokens;
            Source = source;
            Solution = solution;
            Vector = vector;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets PackageName
        /// </summary>
        [JsonPropertyName("packageName")]
        public string PackageName { get; set; }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [JsonPropertyName("action")]
        public string Action { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Tokens
        /// </summary>
        [JsonPropertyName("tokens")]
        public int Tokens { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [JsonPropertyName("source")]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets Solution
        /// </summary>
        [JsonPropertyName("solution")]
        public string Solution { get; set; }

        /// <summary>
        /// Gets or Sets Vector
        /// </summary>
        [JsonPropertyName("vector")]
        public Object? Vector { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Guide {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PackageName: ").Append(PackageName).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Tokens: ").Append(Tokens).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Solution: ").Append(Solution).Append("\n");
            sb.Append("  Vector: ").Append(Vector).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Guide" />
    /// </summary>
    public class GuideJsonConverter : JsonConverter<Guide>
    {
        /// <summary>
        /// Deserializes json to <see cref="Guide" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Guide Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> id = default;
            Option<string?> packageName = default;
            Option<string?> action = default;
            Option<string?> description = default;
            Option<int?> tokens = default;
            Option<string?> source = default;
            Option<string?> solution = default;
            Option<Object?> vector = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "packageName":
                            packageName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "action":
                            action = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tokens":
                            tokens = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "source":
                            source = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "solution":
                            solution = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "vector":
                            vector = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Guide.", nameof(id));

            if (!packageName.IsSet)
                throw new ArgumentException("Property is required for class Guide.", nameof(packageName));

            if (!action.IsSet)
                throw new ArgumentException("Property is required for class Guide.", nameof(action));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class Guide.", nameof(description));

            if (!tokens.IsSet)
                throw new ArgumentException("Property is required for class Guide.", nameof(tokens));

            if (!source.IsSet)
                throw new ArgumentException("Property is required for class Guide.", nameof(source));

            if (!solution.IsSet)
                throw new ArgumentException("Property is required for class Guide.", nameof(solution));

            if (!vector.IsSet)
                throw new ArgumentException("Property is required for class Guide.", nameof(vector));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Guide.");

            if (packageName.IsSet && packageName.Value == null)
                throw new ArgumentNullException(nameof(packageName), "Property is not nullable for class Guide.");

            if (action.IsSet && action.Value == null)
                throw new ArgumentNullException(nameof(action), "Property is not nullable for class Guide.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class Guide.");

            if (tokens.IsSet && tokens.Value == null)
                throw new ArgumentNullException(nameof(tokens), "Property is not nullable for class Guide.");

            if (source.IsSet && source.Value == null)
                throw new ArgumentNullException(nameof(source), "Property is not nullable for class Guide.");

            if (solution.IsSet && solution.Value == null)
                throw new ArgumentNullException(nameof(solution), "Property is not nullable for class Guide.");

            return new Guide(id.Value!.Value!, packageName.Value!, action.Value!, description.Value!, tokens.Value!.Value!, source.Value!, solution.Value!, vector.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Guide" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="guide"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Guide guide, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, guide, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Guide" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="guide"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Guide guide, JsonSerializerOptions jsonSerializerOptions)
        {
            if (guide.PackageName == null)
                throw new ArgumentNullException(nameof(guide.PackageName), "Property is required for class Guide.");

            if (guide.Action == null)
                throw new ArgumentNullException(nameof(guide.Action), "Property is required for class Guide.");

            if (guide.Description == null)
                throw new ArgumentNullException(nameof(guide.Description), "Property is required for class Guide.");

            if (guide.Source == null)
                throw new ArgumentNullException(nameof(guide.Source), "Property is required for class Guide.");

            if (guide.Solution == null)
                throw new ArgumentNullException(nameof(guide.Solution), "Property is required for class Guide.");

            writer.WriteNumber("id", guide.Id);

            writer.WriteString("packageName", guide.PackageName);

            writer.WriteString("action", guide.Action);

            writer.WriteString("description", guide.Description);

            writer.WriteNumber("tokens", guide.Tokens);

            writer.WriteString("source", guide.Source);

            writer.WriteString("solution", guide.Solution);

            if (guide.Vector != null)
            {
                writer.WritePropertyName("vector");
                JsonSerializer.Serialize(writer, guide.Vector, jsonSerializerOptions);
            }
            else
                writer.WriteNull("vector");
        }
    }
}
